# config/settings.py

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file in the project root
load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# Make sure SECRET_KEY is set in your .env file
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-default-key-placeholder')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # Keep True for development, set to False for production

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',          # Core authentication framework
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',   # Manages static files

    # Local apps
    'users.apps.UsersConfig',       # Your users app (if you have one separate from auth)
    'players.apps.PlayersConfig',   # Your players app (Needs to be here)

    # Third-party apps
    'crispy_forms',                 # For better form rendering
    'crispy_bootstrap5',            # Bootstrap 5 template pack for crispy-forms
    'widget_tweaks',                # Useful for form field rendering (Needs to be here)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware', # Manages sessions across requests
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',        # Protects against Cross Site Request Forgery (Needs to be here)
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Associates users with requests using sessions (Needs to be here)
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls' # Points to your main urls.py file (config/urls.py)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Global templates directory (optional, but often useful)
        'APP_DIRS': True, # IMPORTANT: Allows Django to find templates inside app subdirectories (like players/templates/)
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # Adds the 'request' object to template context
                'django.contrib.auth.context_processors.auth',   # Adds 'user' and 'perms' objects to template context
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Ensure DB details are correctly set in your .env file
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
        # 'OPTIONS': {                       # Removed gssencmode unless specifically needed for your setup
        #     'gssencmode': 'disable',
        # },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images served by your web server)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = 'static/'
# To serve static files collected by collectstatic in production:
# STATIC_ROOT = BASE_DIR / 'staticfiles_collected'
# To include project-level static files during development (if you have a BASE_DIR / 'static' folder):
# STATICFILES_DIRS = [BASE_DIR / 'static']


# Media files (User-uploaded content)
# https://docs.djangoproject.com/en/4.2/ref/settings/#media-root
MEDIA_URL = '/media/' # URL prefix for media files
MEDIA_ROOT = BASE_DIR / 'media' # Absolute filesystem path to the directory for user uploads

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Authentication Settings ---
# Where to redirect users if they access @login_required views without being logged in
LOGIN_URL = 'login' # Corresponds to the 'name' argument in your login path() in config/urls.py

# Where to redirect users after successful login if no 'next' parameter is provided
LOGIN_REDIRECT_URL = 'players:profile_detail' # Redirects to the URL named 'profile_detail' within the 'players' app namespace

# Where to redirect users after successful logout
LOGOUT_REDIRECT_URL = 'home' # Redirects to the URL named 'home' (defined in config/urls.py)
# --- End Authentication Settings ---


# Crispy Forms Settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"