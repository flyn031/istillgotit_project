# Generated by Django 4.2.20 on 2025-04-22 20:26

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('players', '0009_playerprofile_primary_sport'),
    ]

    operations = [
        migrations.CreateModel(
            name='CricketMatchStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_format_override', models.CharField(choices=[('Test', 'Test/Multi-Day'), ('ODI', 'ODI (50 Over)'), ('T20', 'T20'), ('Other', 'Other')], help_text='Format of this specific match', max_length=10, verbose_name='Match Format')),
                ('batting_order_position', models.PositiveIntegerField(blank=True, null=True, verbose_name='Batting Pos.')),
                ('runs_scored', models.PositiveIntegerField(default=0, verbose_name='Runs Scored')),
                ('balls_faced', models.PositiveIntegerField(default=0, verbose_name='Balls Faced')),
                ('fours_hit', models.PositiveIntegerField(default=0, verbose_name='4s Hit')),
                ('sixes_hit', models.PositiveIntegerField(default=0, verbose_name='6s Hit')),
                ('not_out', models.BooleanField(default=False, verbose_name='Not Out?')),
                ('bowling_type', models.CharField(blank=True, choices=[('Pace', 'Pace'), ('Spin', 'Spin'), ('Mixed', 'Mixed'), ('None', 'Did not bowl'), ('Other', 'Other')], default='None', max_length=10, verbose_name='Bowling Type')),
                ('overs_bowled', models.DecimalField(decimal_places=1, default=0.0, help_text='e.g., 4.2 for 4 overs and 2 balls', max_digits=4, verbose_name='Overs Bowled')),
                ('runs_conceded', models.PositiveIntegerField(default=0, verbose_name='Runs Conceded')),
                ('wickets_taken', models.PositiveIntegerField(default=0, verbose_name='Wickets Taken')),
                ('maidens_bowled', models.PositiveIntegerField(default=0, verbose_name='Maidens Bowled')),
                ('dot_balls_bowled', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Dot Balls Bowled')),
                ('catches_taken', models.PositiveIntegerField(default=0, verbose_name='Catches Taken')),
                ('run_outs_effected', models.PositiveIntegerField(default=0, verbose_name='Run Outs Effected')),
                ('stumpings', models.PositiveIntegerField(default=0, verbose_name='Stumpings (Wicketkeeper)')),
            ],
            options={
                'verbose_name': 'Cricket Match Stat',
                'verbose_name_plural': 'Cricket Match Stats',
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sport', models.CharField(choices=[('Soccer', 'Soccer'), ('Cricket', 'Cricket'), ('Rugby', 'Rugby'), ('Other', 'Other/Unspecified')], max_length=50, verbose_name='Sport')),
                ('match_date', models.DateField(default=django.utils.timezone.now, verbose_name='Match Date')),
                ('opponent', models.CharField(blank=True, max_length=100, verbose_name='Opponent')),
                ('competition', models.CharField(blank=True, help_text='e.g., U18 League, County Championship, Friendly', max_length=100, verbose_name='Competition/Level')),
                ('season', models.CharField(blank=True, help_text='e.g., 2024-2025', max_length=50, verbose_name='Season')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('player_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_recorded', to='players.playerprofile')),
            ],
            options={
                'verbose_name': 'Match Record',
                'verbose_name_plural': 'Match Records',
                'ordering': ['-match_date'],
            },
        ),
        migrations.CreateModel(
            name='PhysicalStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('Physical', 'Physical Measurement'), ('Combine', 'Combine/Athletic Test'), ('Other', 'Other')], default='Other', max_length=20, verbose_name='Category')),
                ('stat_name', models.CharField(help_text='e.g., Height, Weight, 40-Yard Dash, Vertical Jump', max_length=100, verbose_name='Statistic Name')),
                ('stat_value', models.CharField(help_text='The measurement value (e.g., 185, 6\'1", 4.52)', max_length=50, verbose_name='Value')),
                ('stat_unit', models.CharField(blank=True, help_text='e.g., cm, lbs, inches, seconds', max_length=20, null=True, verbose_name='Unit')),
                ('date_recorded', models.DateField(help_text='When this measurement/test was taken.', verbose_name='Date Recorded')),
                ('player_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='physical_stats', to='players.playerprofile')),
            ],
            options={
                'verbose_name': 'Physical Stat',
                'verbose_name_plural': 'Physical Stats',
                'ordering': ['category', 'stat_name', '-date_recorded'],
            },
        ),
        migrations.CreateModel(
            name='RugbyMatchStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(blank=True, help_text='e.g., Flanker, Fly-Half', max_length=50, verbose_name='Position Played')),
                ('minutes_played', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Minutes Played')),
                ('tries', models.PositiveIntegerField(default=0, verbose_name='Tries Scored')),
                ('carries', models.PositiveIntegerField(default=0, verbose_name='Carries Made')),
                ('metres_carried', models.PositiveIntegerField(default=0, verbose_name='Metres Carried')),
                ('offloads', models.PositiveIntegerField(default=0, verbose_name='Offloads')),
                ('tackles_made', models.PositiveIntegerField(default=0, verbose_name='Tackles Made')),
                ('missed_tackles', models.PositiveIntegerField(default=0, verbose_name='Missed Tackles')),
                ('turnovers_won', models.PositiveIntegerField(default=0, verbose_name='Turnovers Won')),
                ('successful_kicks', models.PositiveIntegerField(default=0, help_text='Goals from Conversions and Penalties', verbose_name='Successful Kicks (Place)')),
                ('kicking_metres', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Kicking Metres (From Hand)')),
                ('conversions', models.PositiveIntegerField(default=0, verbose_name='Conversions Made')),
                ('penalties', models.PositiveIntegerField(default=0, verbose_name='Penalty Goals Made')),
                ('drop_goals', models.PositiveIntegerField(default=0, verbose_name='Drop Goals Made')),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rugby_stats', to='players.match')),
                ('player_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rugby_match_stats', to='players.playerprofile')),
            ],
            options={
                'verbose_name': 'Rugby Match Stat',
                'verbose_name_plural': 'Rugby Match Stats',
            },
        ),
        migrations.CreateModel(
            name='SoccerMatchStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(blank=True, help_text='e.g., CAM, CB, GK', max_length=50, verbose_name='Position Played')),
                ('minutes_played', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)], verbose_name='Minutes Played')),
                ('goals', models.PositiveIntegerField(default=0, verbose_name='Goals Scored')),
                ('assists', models.PositiveIntegerField(default=0, verbose_name='Assists')),
                ('shots', models.PositiveIntegerField(default=0, verbose_name='Total Shots')),
                ('shots_on_target', models.PositiveIntegerField(default=0, verbose_name='Shots on Target')),
                ('passes_attempted', models.PositiveIntegerField(default=0, verbose_name='Passes Attempted')),
                ('passes_completed', models.PositiveIntegerField(default=0, verbose_name='Passes Completed')),
                ('tackles_made', models.PositiveIntegerField(default=0, verbose_name='Tackles Made')),
                ('interceptions', models.PositiveIntegerField(default=0, verbose_name='Interceptions')),
                ('clearances', models.PositiveIntegerField(default=0, verbose_name='Clearances')),
                ('dribbles_completed', models.PositiveIntegerField(default=0, verbose_name='Dribbles Completed')),
                ('fouls_committed', models.PositiveIntegerField(default=0, verbose_name='Fouls Committed')),
                ('yellow_cards', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(2)], verbose_name='Yellow Cards')),
                ('red_cards', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(1)], verbose_name='Red Cards')),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='soccer_stats', to='players.match')),
                ('player_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soccer_match_stats', to='players.playerprofile')),
            ],
            options={
                'verbose_name': 'Soccer Match Stat',
                'verbose_name_plural': 'Soccer Match Stats',
            },
        ),
        migrations.AlterField(
            model_name='videoupload',
            name='allow_comments',
            field=models.BooleanField(default=True, verbose_name='Allow Comments'),
        ),
        migrations.DeleteModel(
            name='PlayerStat',
        ),
        migrations.AddField(
            model_name='cricketmatchstat',
            name='match',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cricket_stats', to='players.match'),
        ),
        migrations.AddField(
            model_name='cricketmatchstat',
            name='player_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cricket_match_stats', to='players.playerprofile'),
        ),
    ]
